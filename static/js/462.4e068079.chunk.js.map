{"version":3,"file":"static/js/462.4e068079.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/Form/Form.styled.js","components/Form/Form.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ButtonDlt = styled.button`\nfont-size: 24px;\nborder-radius: 8px;\ncolor: white;\nbackground-color: #08c;\nmargin-left:40px;\ncursor: pointer;\n`;\n\nexport const Wrapper = styled.div`\ndisplay:flex;\nalign-items: center;\n`;","import { ButtonDlt, Wrapper } from \"./ContactItem.styled\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactItem = ({ item: { name, phone }, itemId }) => {\n    const dispatch = useDispatch();\n    const deleteHandContact = () => dispatch(deleteContact(itemId));\n    return (\n        <Wrapper>\n            <>{name}: {phone}</>\n            <ButtonDlt type=\"button\" onClick={deleteHandContact}>Delete</ButtonDlt>\n        </Wrapper>\n    );\n};\n","import styled from \"styled-components\";\n\nexport const LiItem = styled.li`\npadding-bottom: 8px;\ntext-align:center;\nfont-size: 24px;\n`;\n\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\n//export const getError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;","import { ContactItem } from \"../ContactItem/ContactItem\";\nimport { LiItem } from \"./ContactList.styled\";\nimport { selectContacts, selectFilter } from \"redux/contacts/selectors\";\nimport { useSelector } from \"react-redux\";\n\n\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter).value;\n\n    const filteredContacts = contacts.filter(item => {  \n      return item.name\n        .toLowerCase()\n        .includes(filter.toLowerCase());\n    });\n\n    return (\n        <div>\n            <ul>\n                {filteredContacts.map(item => (\n                    <LiItem key={item.id}>\n                        <ContactItem item={{ name: item.name, phone: item.phone }} itemId={item.id} />\n                    </LiItem>\n                ))}\n            </ul>\n        </div>\n    )\n}","import { Form, Field,ErrorMessage} from 'formik';\nimport styled from \"styled-components\";\n\n\n\nexport const StyledForm = styled(Form)`\ndisplay: flex;\nflex-direction: column;\npadding:20px;\ngap: 8px;\nborder: 4px solid black;\nborder-radius: 8px;\nwidth: 600px;\nfont-weight: 600;\n`;\n\nexport const FieldInfo = styled(Field)`\nborder: 4px solid #08c;\nfont-size: 24px;\nborder-radius: 8px;\n`;\n\n\nexport const ButtonAdd = styled.button`\nalign-self: flex-start;\nfont-size: 24px;\nborder-radius: 8px;\ncolor: white;\nbackground-color: #08c;\nmargin-top:40px;\ncursor: pointer;\n:focus{\n    background-color:green;\n}\n`;\n\n\nexport const ErrorMsg = styled(ErrorMessage)`\ncolor: red;\nfont-size: 20px;\n`\n","import { Formik } from 'formik';\nimport { StyledForm, FieldInfo, ButtonAdd, ErrorMsg } from \"./Form.styled\";\nimport * as Yup from 'yup';\n//import { addContact } from 'redux/contactsSlice';\nimport { useDispatch } from \"react-redux\";\nimport { selectContacts} from \"redux/contacts/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/operations\";\n\n\nconst ContactFormSchema = Yup.object().shape({\n    name: Yup.string()\n        .min(4, 'Too Short!')\n        .required('Required'),\n    phone: Yup.number()\n        .min(3, 'At least 3')\n        .positive('Must be positive!')\n        .required(\"Required\"),\n});\n\nexport const ContactForm = () => {\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n       \n    const addHandContact = (values) => {\n        if (-1 !== contacts.findIndex(item => item.name === values.name)) {\n            alert(`${values.name} is already in contacts.`);\n            return;\n        }\n        dispatch(addContact(values))\n    };\n    return (\n        <div>\n            \n            <Formik\n                initialValues={{\n                    name: '',\n                    phone: '',\n                }}\n                validationSchema={ContactFormSchema}\n                onSubmit={(values, actions) => {\n                    addHandContact(values);\n                    actions.resetForm();\n                }}\n            >\n                <StyledForm>\n                    <label>\n                        Name\n                    </label>\n                    <FieldInfo type=\"text\" name=\"name\" placeholder=\"Name ...\" /> \n                    <ErrorMsg name=\"name\" component=\"div\" />\n                    <label>\n                        Number\n                    </label>\n                    <FieldInfo type=\"number\" name=\"phone\" placeholder=\"Number ...\" /> \n                    <ErrorMsg name=\"phone\" component=\"div\" />\n                    <ButtonAdd type=\"submit\">Add contact</ButtonAdd>\n                </StyledForm>\n            </Formik>\n        </div>\n    );\n};\n\n/*export const TaskForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    dispatch(addTask(event.target.elements.text.value));\n    form.reset();\n  };\n  // Остальное код компонента\n};*/\n\n  \n\n","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div`\ndisplay: flex;\n//flex-direction: column;\ngap:8px;\nmargin-top: 24px;\nmargin-bottom: 24px;\nfont-size: 24px;\nfont-weight: 600;\n`;\n\n\nexport const TextInput=styled.input`\nborder: 4px solid #08c;\nfont-size: 24px;\nborder-radius: 8px;\n`;\n\nexport const ResetBtn = styled.button`\ncolor: white;\nfont-size: 24px;\nborder-radius: 8px;\nbackground-color: #08c;\n`;","import { Wrapper, TextInput, ResetBtn } from \"./Filter.styled\";\nimport { setFilter, resetFilter } from \"redux/filterSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\n\n\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter).value;\n    const dispatch = useDispatch();\n    const filterChange = filter => dispatch(setFilter(filter));\n    const resetHandFilter = () => dispatch(resetFilter());\n\n    return (\n        <Wrapper>\n            <label>Find contacts by name</label>\n            <TextInput\n                type=\"text\"\n                name=\"Findname\"\n                value={filter}\n                onChange={evt => filterChange(evt.target.value)}\n            />\n            <ResetBtn onClick={() => resetHandFilter()}>Reset</ResetBtn>\n        </Wrapper>\n    )\n};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { ContactForm } from \"../components/Form/Form\";\nimport { Filter } from \"components/Filter/Filter\";\n//import {ContactEditor} from\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectLoading } from \"redux/contacts/selectors\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Your contacts</title>\n            </Helmet>\n            <div>{isLoading && \"Request in progress...\"}</div>\n            <ContactForm />\n            <Filter/>\n            <ContactList />\n            \n        </>\n    );\n};"],"names":["ButtonDlt","styled","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","ContactItem","_ref","_ref$item","item","name","phone","itemId","dispatch","useDispatch","_jsxs","children","_Fragment","_jsx","type","onClick","deleteContact","LiItem","selectContacts","state","contacts","items","selectLoading","isLoading","selectFilter","filter","ContactList","useSelector","value","filteredContacts","toLowerCase","includes","map","id","StyledForm","Form","FieldInfo","Field","ButtonAdd","_templateObject3","ErrorMsg","ErrorMessage","_templateObject4","ContactFormSchema","Yup","shape","min","required","positive","ContactForm","Formik","initialValues","validationSchema","onSubmit","values","actions","findIndex","addContact","alert","concat","addHandContact","resetForm","placeholder","component","TextInput","ResetBtn","Filter","onChange","evt","setFilter","filterChange","target","resetFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}